name: Icon-Algorand CI
on:
  push:
    branches: ["feature/integration-test"]
  pull_request:
    branches: ["master"]
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Start containers
        working-directory: ./devnet/docker/icon-algorand
        run: |
          mkdir cache
          docker-compose -f "docker-compose.yml" up -d --build

      - name: Install PyTeal
        working-directory: ./pyteal
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install pyteal

      - name: Install KMD
        run: |
          sudo mkdir /tmp/algorand
          sudo wget -O /tmp/algorand/algorand.tar.gz \
          https://github.com/algorand/go-algorand/releases/download/v3.13.3-stable/node_stable_linux-amd64_3.13.3.tar.gz
          cd /tmp/algorand
          sudo tar xf algorand.tar.gz
          cd bin
          sudo mv kmd /usr/local/bin

      - name: Compile golang tools
        working-directory: cmd/tools/algorand
        run: ./install-tools.sh

      - name: Run Algorand lifecheck test
        run: |
          export ALGOD_ADDRESS=http://$(docker inspect \\
          -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' algorand):4001
          go test -v pyteal/test/lifecheck_test/lifecheck_test.go

      - name: Install goloop
        run: |
          cd /tmp
          wget https://github.com/icon-project/goloop/archive/refs/tags/v1.3.3.tar.gz
          tar xf v1.3.3.tar.gz
          cd goloop-1.3.3/cmd/goloop
          go install
          cd /tmp
          rm -rf goloop-1.3.3 v1.3.3.tar.gz

      - name: Build ICON smart contracts
        working-directory: ./javascore
        run: |
          gradle clean
          gradle dummyBSH:optimizedJar
          gradle bmc:optimizedJar

      - name: Create and fund keystore wallet
        working-directory: ./devnet/docker/icon-algorand
        run: |
          export PATH=$PATH:~/go/bin
          goloop ks gen --out icon.keystore.json
          KS_ADDRESS=$(cat icon.keystore.json | jq -r '.address')
          PASSWORD=$(docker compose exec goloop cat goloop.keysecret)
          docker compose exec goloop goloop chain ls | jq -r '.[0] | .nid' > cache/nid

          docker compose exec goloop goloop rpc sendtx transfer \
            --uri http://localhost:9080/api/v3  \
            --nid $(cat cache/nid) \
            --step_limit=3000000000 \
            --key_store goloop.keystore.json --key_password $PASSWORD \
            --to $KS_ADDRESS --value=2001

      - name: Deploy BMC on ICON
        working-directory: ./devnet/docker/icon-algorand
        run: |
          export PATH=$PATH:~/go/bin
          CONTRACT=../../../javascore/bmc/build/libs/bmc-optimized.jar

          DEPLOY_TXN_ID=$(goloop rpc sendtx deploy $CONTRACT \
          --uri http://localhost:9080/api/v3 \
          --key_store ./icon.keystore.json --key_password gochain \
          --nid $(cat cache/nid) \
          --content_type application/java \
          --step_limit 3000000000 \
          --param _net="$(cat cache/nid).icon")

          ./../algod/scripts/wait_for_transaction.sh $DEPLOY_TXN_ID scoreAddress \
          > cache/icon_bmc_addr

      - name: Deploy dummy BSH on ICON
        working-directory: ./devnet/docker/icon-algorand
        run: |
          export PATH=$PATH:~/go/bin
          CONTRACT=../../../javascore/dummyBSH/build/libs/dummyBSH-optimized.jar

          TXN_ID=$(
            goloop rpc sendtx deploy $CONTRACT \
              --uri http://localhost:9080/api/v3 \
              --key_store icon.keystore.json --key_password gochain \
              --nid $(cat cache/nid) --step_limit 10000000000 \
              --content_type application/java
          )

          ./../algod/scripts/wait_for_transaction.sh $TXN_ID scoreAddress > cache/icon_dbsh_addr

          msg=$(
            goloop rpc call --to $(echo $(cat cache/icon_dbsh_addr) | cut -d '"' -f 2) \
              --uri http://localhost:9080/api/v3 \
              --method getLastReceivedMessage
          )
          echo -n $msg | xxd -r -p

      - name: Build Algorand smart contracts
        working-directory: pyteal
        run: |
          ./build.sh bmc.bmc bmc
          ./build.sh bsh.bsh bsh

      - name: Deploy BMC and DummyBSH on Algorand
        working-directory: ./devnet/docker/icon-algorand
        run: |
          export PATH=$PATH:~/go/bin
          ALGOD_ADDRESS=http://localhost:4001
          ALGOD_TOKEN=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          KMD_ADDRESS=http://localhost:4002
          KMD_TOKEN=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

          docker cp algorand:/testnet/Node/kmd-v0.5 /tmp/kmd
          kmd -d /tmp/kmd &

          sleep 5

          PRIVATE_KEY=$(KMD_ADDRESS=$KMD_ADDRESS KMD_TOKEN=$KMD_TOKEN kmd-extract-private-key 1)
          BMC_TX_ID=$(PRIVATE_KEY=$PRIVATE_KEY ALGOD_ADDRESS=$ALGOD_ADDRESS ALGOD_TOKEN=$ALGOD_TOKEN deploy-contract ../../../pyteal/teal/bmc)
          DUMMY_BSH_TX_ID=$(PRIVATE_KEY=$PRIVATE_KEY ALGOD_ADDRESS=$ALGOD_ADDRESS ALGOD_TOKEN=$ALGOD_TOKEN deploy-contract ../../../pyteal/teal/bsh)
          BMC_APP_ID=$(ALGOD_ADDRESS=$ALGOD_ADDRESS ALGOD_TOKEN=$ALGOD_TOKEN get-app-id $BMC_TX_ID)
          DUMMY_BSH_APP_ID=$(ALGOD_ADDRESS=$ALGOD_ADDRESS ALGOD_TOKEN=$ALGOD_TOKEN get-app-id $DUMMY_BSH_TX_ID)
          echo $BMC_APP_ID
          echo $DUMMY_BSH_APP_ID

          docker compose exec algod goal app info --app-id $BMC_APP_ID \
          | awk -F ':' '/Application account:/ {gsub(/^[[:space:]]+|[[:space:]]+$/,"",$2); \
          print "btp://0x14.algo/" $2}' > cache/algo_btp_addr

      - name: Register Icon BSH with BMC
        working-directory: ./devnet/docker/icon-algorand
        run: |
          export PATH=$PATH:~/go/bin

          TXN_ID=$(goloop rpc sendtx call --to $(cat cache/icon_bmc_addr) \
                --method addService \
                --value 0 \
                --param _addr=$(cat cache/icon_dbsh_addr) \
                --param _svc="dbsh" \
                --step_limit=3000000000 \
                --uri http://localhost:9080/api/v3 \
                --key_store icon.keystore.json --key_password gochain \
                --nid=$(cat cache/nid))

          ./../algod/scripts/wait_for_transaction.sh $TXN_ID

      - name: Link Algorand BMC on Icon BMC
        working-directory: ./devnet/docker/icon-algorand
        run: |
          export PATH=$PATH:~/go/bin

          LINK_TXN_ID=$(goloop rpc sendtx call --to $(cat cache/icon_bmc_addr) \
          --method addLink --param _link=$(cat cache/algo_btp_addr) \
          --key_store ./icon.keystore.json --key_password gochain \
          --nid $(cat cache/nid) --step_limit 3000000000 --uri http://localhost:9080/api/v3)

          ./../algod/scripts/wait_for_transaction.sh $LINK_TXN_ID

          ALGO_ROUND=$(docker compose exec algod goal node lastround)

          ADD_ROUND=$(goloop rpc sendtx call --to $(cat cache/icon_bmc_addr) --method setLinkRxHeight \
          --param _link=$(cat cache/algo_btp_addr) --param _height=$ALGO_ROUND \
          --key_store ./icon.keystore.json --key_password gochain \
          --nid $(cat cache/nid) --step_limit 3000000000 --uri http://localhost:9080/api/v3)

          ./../algod/scripts/wait_for_transaction.sh $ADD_ROUND

          ADD_RELAY=$(goloop rpc sendtx call --to $(cat cache/icon_bmc_addr) --method addRelay \
          --param _link=$(cat cache/algo_btp_addr) \
          --param _addr=$(cat icon.keystore.json | jq .address) \
          --key_store ./icon.keystore.json --key_password gochain \
          --nid $(cat cache/nid) --step_limit 3000000000 --uri http://localhost:9080/api/v3) \

          ./../algod/scripts/wait_for_transaction.sh $ADD_RELAY

      - name: Update config file and start relayer
        working-directory: ./cmd/iconbridge
        run: |
          ICON_ALGO="../../devnet/docker/icon-algorand"
          ICON_BTP="btp://0x2.icon/$(cat "$ICON_ALGO/cache/icon_bmc_addr")"
          ALGO_BTP=$(cat "$ICON_ALGO/cache/algo_btp_addr")

          jq --arg ICON_BTP "$ICON_BTP" --arg ALGO_BTP "$ALGO_BTP" '.relays[0].dst.address=$ICON_BTP | .relays[0].src.address=$ALGO_BTP' $ICON_ALGO/a2i.json > a2i_tmp.json
          mv a2i_tmp.json $ICON_ALGO/a2i.json

          go run . -config=$ICON_ALGO/a2i.json &
          cat $ICON_ALGO/a2i.json
